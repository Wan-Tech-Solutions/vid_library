<?php

namespace App\Http\Controllers;

use Illuminate\Http\Request;
use Illuminate\Support\Facades\Storage;
use App\Models\Video;
use Spatie\Activitylog\Models\Activity;
use Spatie\Activitylog\Traits\LogsActivity;
use Illuminate\Support\Facades\Auth;
use FFMpeg\FFMpeg;
use FFMpeg\Coordinate\TimeCode;
use Illuminate\Support\Str;

class VideoController extends Controller
{
    public function index(Request $request)
    {
        $query = Video::query();

        if ($request->filled('search')) {
            $query->where('title', 'like', '%' . $request->search . '%');
        }

        if ($request->filled('status')) {
            $query->where('is_published', $request->status);
        }

        $videos = $query->latest()->paginate(10); // <-- Important: paginate, not get

        return view('videos.index', compact('videos'));
    }

    public function create()
    {
        return view('videos.create');
    }

    public function store(Request $request)
    {
        $request->validate([
            'title' => 'required|string|max:255',
            'description' => 'nullable|string',
            'video' => 'required|mimes:mp4|max:512000',
            'thumbnail' => 'nullable|image|mimes:jpeg,png,jpg,webp|max:2048',
            'autogenerated_thumbnail' => 'nullable|file|mimes:jpeg,jpg,png'
        ]);

        $videoPath = $request->file('video')->store('videos', 'public');

        // Save manual or JS-generated thumbnail
        if ($request->hasFile('thumbnail')) {
            $thumbPath = $request->file('thumbnail')->store('thumbnails', 'public');
        } elseif ($request->hasFile('autogenerated_thumbnail')) {
            $thumbPath = $request->file('autogenerated_thumbnail')->store('thumbnails', 'public');
        } else {
            // fallback: generate server-side thumbnail using ffmpeg
            $thumbPath = $this->generateVideoThumbnail($videoPath);
        }

        $video = Video::create([
            'title' => $request->title,
            'description' => $request->description,
            'video_path' => $videoPath,
            'thumbnail_path' => $thumbPath,
            'uploaded_by' => auth()->id(),
            'is_published' => false,
        ]);

        activity()
            ->causedBy(auth()->user())
            ->performedOn($video)
            ->withProperties(['title' => $video->title])
            ->log('Video uploaded');

        return response()->json(['success' => true], 200);
    }


    public function show(string $id)
    {
        $video = Video::findOrFail($id);
        return view('videos.show', compact('video'));
    }

    public function edit(string $id)
    {
        $video = Video::findOrFail($id);
        return view('videos.edit', compact('video'));
    }

    public function update(Request $request, $id)
    {
        $video = Video::findOrFail($id);

        $request->validate([
            'title' => 'required|string|max:255',
            'description' => 'nullable|string',
            'video' => 'nullable|mimes:mp4|max:512000',
            'thumbnail' => 'nullable|image|mimes:jpeg,png,jpg,webp|max:2048',
        ]);

        $video->title = $request->title;
        $video->description = $request->description;

        // If a new video is uploaded
        if ($request->hasFile('video')) {
            // Delete old video
            if ($video->video_path && Storage::disk('public')->exists($video->video_path)) {
                Storage::disk('public')->delete($video->video_path);
            }

            // Save new video
            $newVideoPath = $request->file('video')->store('videos', 'public');
            $video->video_path = $newVideoPath;

            // Auto-generate thumbnail only if no new manual thumbnail is uploaded
            if (!$request->hasFile('thumbnail')) {
                // Delete old thumbnail
                if ($video->thumbnail_path && Storage::disk('public')->exists($video->thumbnail_path)) {
                    Storage::disk('public')->delete($video->thumbnail_path);
                }

                $video->thumbnail_path = $this->generateVideoThumbnail($newVideoPath);
            }
        }

        // If a new thumbnail is uploaded manually
        if ($request->hasFile('thumbnail')) {
            if ($video->thumbnail_path && Storage::disk('public')->exists($video->thumbnail_path)) {
                Storage::disk('public')->delete($video->thumbnail_path);
            }

            $thumbPath = $request->file('thumbnail')->store('thumbnails', 'public');
            $video->thumbnail_path = $thumbPath;
        }

        $video->save();

        return redirect()->route('videos.index')->with('success', 'Video updated successfully.');
    }

    public function destroy(string $id)
    {
        $video = Video::findOrFail($id);
        Storage::disk('public')->delete($video->video_path);
        $video->delete();

        activity()
            ->causedBy(auth()->user())
            ->performedOn($video)
            ->withProperties(['title' => $video->title])
            ->log('Video deleted');

        return redirect()->route('videos.index')->with('success', 'Video deleted.');
    }

    public function togglePublish($id)
    {
        $video = Video::findOrFail($id);
        $video->is_published = !$video->is_published;
        $video->save();

        activity()
            ->causedBy(auth()->user())
            ->performedOn($video)
            ->withProperties(['title' => $video->title])
            ->log('Video ' . ($video->is_published ? 'published' : 'unpublished'));

        return back()->with('success', 'Video ' . ($video->is_published ? 'published' : 'hidden') . ' successfully.');
    }

    public function reorder(Request $request)
    {
        foreach ($request->order as $videoData) {
            Video::where('id', $videoData['id'])->update(['order' => $videoData['position']]);
        }

        return response()->json(['success' => true]);
    }

    protected function generateVideoThumbnail($videoPath)
    {
        $videoFileName = basename($videoPath);
        $thumbnailName = pathinfo($videoFileName, PATHINFO_FILENAME) . '.jpg';
        $thumbnailPath = 'thumbnails/' . $thumbnailName;

        FFMpeg::fromDisk('public')
            ->open($videoPath)
            ->getFrameFromSeconds(5)
            ->export()
            ->toDisk('public')
            ->save($thumbnailPath);

        return $thumbnailPath;
    }
}
